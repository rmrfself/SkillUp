<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" autoDrawBackground="false" focusEnabled="true" buttonMode="true" useHandCursor="true" creationComplete="setRenderer()">
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
		<s:State name="online" basedOn="normal"/>
		<s:State name="offline" basedOn="normal"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[
			import org.enjoytalk.ApplicationFacade;
			import org.enjoytalk.model.CourseProxy;

			override protected function getCurrentRendererState():String
			{
				if (selected)
				{
					itemRenderer.enabled=true;
				}
				else
				{
					itemRenderer.enabled=false;
				}
				return super.getCurrentRendererState();
			}

			private function setRenderer():void
			{
				this.alpha=1;
				if (data.isSkipped)
				{
					this.alpha=0.5;
				}
				cueText.setStyle("styleName", "previewCueText_" + LanguageCodeManager.getInstance().cueLanguageCode);
				responseText.setStyle("styleName", "previewResponseText_" + LanguageCodeManager.getInstance().responseLanguageCode);
			}

			private function skipItem(event:Event):void
			{
				var facade:ApplicationFacade=ApplicationFacade.getInstance();
				var courseProxy:CourseProxy=CourseProxy(facade.retrieveProxy(CourseProxy.NAME));
				courseProxy.skippedItem(data.item.id, skippedDone, skippedProgress, skippedFail);
			}

			private function skippedDone(isSelected:Boolean=false):void
			{
				if (isSelected)
				{
					itemChecked.selected=false;
					this.alpha=0.5;
				}
				else
				{
					itemChecked.selected=true;
					this.alpha=1;
				}
				dispatchEvent(new Event("itemSkippedEvent", true));
			}

			private function skippedProgress():void
			{
			}

			private function skippedFail():void
			{
			}

			override public function set data(value:Object):void
			{
				super.data=value;
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if (data)
				{
					progressBar.setProgress(data.progress, 100);
				}
				if (data.onlineState)
				{
					itemChecked.visible=true;
					itemChecked.includeInLayout=true;
					radioButton.includeInLayout=false;
					if (!data.isSkipped)
					{
						itemChecked.selected=true;
					}
					else
					{
						itemChecked.selected=false;
					}
				}
				else
				{
					radioButton.selected=true;
					radioButton.visible=true;
					radioButton.visible=radioButton.includeInLayout=true;
					itemChecked.includeInLayout=false;
				}
			}
		]]>
	</fx:Script>
	<s:SkinnableContainer width="460" height="40" id="itemRenderer" styleName="previewItemRenderer">
		<s:HGroup paddingBottom="6" paddingTop="6" paddingLeft="8" paddingRight="8" verticalAlign="middle" height="100%" width="100%">
			<s:RadioButton id="radioButton" width="18" height="18" selected="false" styleName="commonRadioButton" visible="false" groupName="previewItems" includeInLayout="false"/>
			<s:CheckBox id="itemChecked" width="18" height="18" styleName="commonCheckBox" change="skipItem(event)" visible="false" includeInLayout="false"/>
			<s:Label id="cueText" width="140" fontSize="18" maxWidth="140" text="{data.text}" styleName="goalLabel" maxDisplayedLines="1"/>
			<s:Label id="responseText" width="156" maxWidth="156" styleName="responseLabel" text="{data.response}" maxDisplayedLines="1"/>
			<s:Label id="progressData" fontSize="12" maxWidth="28" width="28" styleName="progressLabel" text="{data.progress}%"/>
			<mx:ProgressBar id="progressBar" width="40" horizontalGap="0" labelWidth="0" label="" labelPlacement="right" maximum="100" styleName="previewItemProgress" mode="manual"/>
		</s:HGroup>
	</s:SkinnableContainer>
</s:ItemRenderer>
